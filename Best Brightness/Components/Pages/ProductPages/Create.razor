@page "/products/create"

@using Microsoft.EntityFrameworkCore
@using BestBrightness.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Product" OnValidSubmit="AddProduct">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Product.Name" class="form-control" />
                <ValidationMessage For="() => Product.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="category" class="form-label">Category:</label>
                <InputText id="category" @bind-Value="Product.Category" class="form-control" />
                <ValidationMessage For="() => Product.Category" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="size" class="form-label">Size:</label>
                <InputText id="size" @bind-Value="Product.Size" class="form-control" />
                <ValidationMessage For="() => Product.Size" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:</label>
                <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control" />
                <ValidationMessage For="() => Product.Quantity" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label>
                <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
                <ValidationMessage For="() => Product.Price" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    public Product Product { get; set; } = new Product();

    private async Task AddProduct()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Products.Add(Product);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
