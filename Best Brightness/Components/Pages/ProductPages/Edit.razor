@page "/products/edit/{Barcode:long}"

@using Microsoft.EntityFrameworkCore
@using BestBrightness.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Product</h4>
<hr />
@if (Product == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Product" OnValidSubmit="UpdateProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Product.Barcode" value="@Product.Barcode" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Product.Name" class="form-control" />
                    <ValidationMessage For="() => Product.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <InputText id="category" @bind-Value="Product.Category" class="form-control" />
                    <ValidationMessage For="() => Product.Category" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="size" class="form-label">Size:</label>
                    <InputText id="size" @bind-Value="Product.Size" class="form-control" />
                    <ValidationMessage For="() => Product.Size" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="quantity" class="form-label">Quantity:</label>
                    <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control" />
                    <ValidationMessage For="() => Product.Quantity" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
                    <ValidationMessage For="() => Product.Price" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    private Product? Product;

    [Parameter]
    public long Barcode { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Product = await context.Products.FindAsync(Barcode);

        if (Product == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Products.Update(Product);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/products");
    }
}
