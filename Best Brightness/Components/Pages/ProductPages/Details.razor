@page "/products/details/{Barcode:long}"

@using Microsoft.EntityFrameworkCore
@using BestBrightness.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Product</h4>
    <hr />
    @if (Product == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Barcode</dt>
            <dd class="col-sm-10">@Product.Barcode</dd>
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@Product.Name</dd>
            <dt class="col-sm-2">Size</dt>
            <dd class="col-sm-10">@Product.Size</dd>
            <dt class="col-sm-2">Category</dt>
            <dd class="col-sm-10">@Product.Category</dd>
            <dt class="col-sm-2">Quantity</dt>
            <dd class="col-sm-10">@Product.Quantity</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@Product.Price</dd>
        </dl>
        <div>
            <button @onclick="() => NavigateToEdit(Product.Barcode)" class="btn btn-primary">Edit</button>
            <button @onclick="NavigateToList" class="btn btn-secondary">Back to List</button>
        </div>
    }
</div>

@code {
    private Product? Product;

    [Parameter]
    public long Barcode { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Product = await context.Products.FindAsync(Barcode);

        if (Product == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private void NavigateToEdit(long productBarcode)
    {
        NavigationManager.NavigateTo($"/products/edit/{productBarcode}");
    }

    private void NavigateToList()
    {
        NavigationManager.NavigateTo("/products");
    }
}
