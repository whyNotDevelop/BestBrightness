@page "/employees/create"

@using Microsoft.EntityFrameworkCore
@using BestBrightness.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Employee</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Employee" OnValidSubmit="AddEmployee">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Employee.Name" class="form-control" />
                <ValidationMessage For="() => Employee.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="role" class="form-label">Role:</label>
                <InputText id="role" @bind-Value="Employee.Role" class="form-control" />
                <ValidationMessage For="() => Employee.Role" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" @bind-Value="Employee.Password" class="form-control" />
                <ValidationMessage For="() => Employee.Password" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/employees">Back to List</a>
</div>

@code {
    public Employee Employee { get; set; } = new Employee();

    private async Task AddEmployee()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Employees.Add(Employee);
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/employees");
        }
        catch (Exception ex)
        {
            // Log exception or show error message
            Console.WriteLine(ex.Message);
        }
    }
}
