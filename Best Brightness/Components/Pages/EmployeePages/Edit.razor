@page "/employees/edit/{Id:int}"

@using Microsoft.EntityFrameworkCore
@using BestBrightness.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Employee</h4>
<hr />
@if (Employee == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Employee" OnValidSubmit="UpdateEmployee">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Employee.Id" value="@Employee.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Employee.Name" class="form-control" />
                    <ValidationMessage For="() => Employee.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="role" class="form-label">Role:</label>
                    <InputText id="role" @bind-Value="Employee.Role" class="form-control" />
                    <ValidationMessage For="() => Employee.Role" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="Employee.Password" class="form-control" />
                    <ValidationMessage For="() => Employee.Password" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/employees">Back to List</a>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    public Employee Employee { get; set; } = new Employee();

    protected override async Task OnParametersSetAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Employee = await context.Employees.FindAsync(Id);

        if (Employee == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task UpdateEmployee()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Employee).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EmployeeExists(Employee.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/employees");
    }

    private bool EmployeeExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Employees.Any(e => e.Id == id);
    }
}
